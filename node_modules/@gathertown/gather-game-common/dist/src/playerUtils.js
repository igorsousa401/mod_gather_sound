"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VehicleAction = exports.getAllEmotes = exports.keyPressedToEmote = exports.CONSTANT_PERMANENT_EMOTES = exports.whisperIdToColor = exports.directionToFacePlayer = exports.nextSpriteDirection = exports.positionAfterMove = exports.oppositeMoveDirection = exports.getMoveDirFromSpriteDir = exports.DEFAULT_TEMP_EMOTES = exports.EMOTE_SHORTCUTS = exports.EMOTE_RESET_SHORTCUT = exports.EMOTE_EMOJIS = exports.Emote = exports.generateDefaultPlayer = void 0;
const positionUtils_1 = require("./positionUtils");
const Player_1 = require("./Player");
const generateDefaultPlayer = () => {
    const player = new Player_1.Player();
    player.x = -99999;
    player.y = -99999;
    player.emote = "";
    player.workCondition = 0;
    player.away = true;
    player.lastActive = new Date().toISOString();
    player.connected = true;
    return player;
};
exports.generateDefaultPlayer = generateDefaultPlayer;
var Emote;
(function (Emote) {
    Emote[Emote["None"] = 0] = "None";
    Emote[Emote["Wave"] = 1] = "Wave";
    Emote[Emote["Heart"] = 2] = "Heart";
    Emote[Emote["PartyPopper"] = 3] = "PartyPopper";
    Emote[Emote["RaisedHand"] = 4] = "RaisedHand";
})(Emote = exports.Emote || (exports.Emote = {}));
exports.EMOTE_EMOJIS = {
    [Emote.Wave]: "👋",
    [Emote.Heart]: "❤️",
    [Emote.PartyPopper]: "🎉",
    [Emote.RaisedHand]: "🤚",
};
exports.EMOTE_RESET_SHORTCUT = "0";
exports.EMOTE_SHORTCUTS = [exports.EMOTE_RESET_SHORTCUT, "1", "2", "3", "4", "5", "6"];
exports.DEFAULT_TEMP_EMOTES = ["👋", "❤️", "🎉", "👍", "😂"];
function getMoveDirFromSpriteDir(direction) {
    switch (direction) {
        case Player_1.SpriteDirection.Dance1:
        case Player_1.SpriteDirection.Dance2:
        case Player_1.SpriteDirection.Dance3:
        case Player_1.SpriteDirection.Dance4:
            return Player_1.MoveDirection.Dance;
        case Player_1.SpriteDirection.Down:
        case Player_1.SpriteDirection.DownAlt:
            return Player_1.MoveDirection.Down;
        case Player_1.SpriteDirection.Up:
        case Player_1.SpriteDirection.UpAlt:
            return Player_1.MoveDirection.Up;
        case Player_1.SpriteDirection.Left:
        case Player_1.SpriteDirection.LeftAlt:
            return Player_1.MoveDirection.Left;
        case Player_1.SpriteDirection.Right:
        case Player_1.SpriteDirection.RightAlt:
            return Player_1.MoveDirection.Right;
        default:
            return null;
    }
}
exports.getMoveDirFromSpriteDir = getMoveDirFromSpriteDir;
function oppositeMoveDirection(direction) {
    switch (direction) {
        case Player_1.MoveDirection.Left:
            return Player_1.MoveDirection.Right;
        case Player_1.MoveDirection.Right:
            return Player_1.MoveDirection.Left;
        case Player_1.MoveDirection.Up:
            return Player_1.MoveDirection.Down;
        case Player_1.MoveDirection.Down:
            return Player_1.MoveDirection.Up;
        default:
            return null;
    }
}
exports.oppositeMoveDirection = oppositeMoveDirection;
function positionAfterMove(start, dir, dist = 1) {
    const { x, y, map } = start;
    switch (dir) {
        case Player_1.MoveDirection.Left:
            return { x: x - dist, y, map };
        case Player_1.MoveDirection.Right:
            return { x: x + dist, y, map };
        case Player_1.MoveDirection.Up:
            return { x, y: y - dist, map };
        case Player_1.MoveDirection.Down:
            return { x, y: y + dist, map };
        default:
            return start;
    }
}
exports.positionAfterMove = positionAfterMove;
function nextSpriteDirection(current, direction) {
    if (direction === Player_1.MoveDirection.Left && current === Player_1.SpriteDirection.Left) {
        return Player_1.SpriteDirection.LeftAlt;
    }
    else if (direction === Player_1.MoveDirection.Right && current === Player_1.SpriteDirection.Right) {
        return Player_1.SpriteDirection.RightAlt;
    }
    else if (direction === Player_1.MoveDirection.Up && current === Player_1.SpriteDirection.Up) {
        return Player_1.SpriteDirection.UpAlt;
    }
    else if (direction === Player_1.MoveDirection.Down && current === Player_1.SpriteDirection.Down) {
        return Player_1.SpriteDirection.DownAlt;
    }
    else if (direction === Player_1.MoveDirection.Dance && current === Player_1.SpriteDirection.Dance1) {
        return Player_1.SpriteDirection.Dance2;
    }
    else if (direction === Player_1.MoveDirection.Dance && current === Player_1.SpriteDirection.Dance2) {
        return Player_1.SpriteDirection.Dance3;
    }
    else if (direction === Player_1.MoveDirection.Dance && current === Player_1.SpriteDirection.Dance3) {
        return Player_1.SpriteDirection.Dance4;
    }
    else if (direction === Player_1.MoveDirection.Left) {
        return Player_1.SpriteDirection.Left;
    }
    else if (direction === Player_1.MoveDirection.Right) {
        return Player_1.SpriteDirection.Right;
    }
    else if (direction === Player_1.MoveDirection.Up) {
        return Player_1.SpriteDirection.Up;
    }
    else if (direction === Player_1.MoveDirection.Down) {
        return Player_1.SpriteDirection.Down;
    }
    else if (direction === Player_1.MoveDirection.Dance) {
        return Player_1.SpriteDirection.Dance1;
    }
    return current;
}
exports.nextSpriteDirection = nextSpriteDirection;
function directionToFacePlayer(player, target) {
    if (player.map !== target.map)
        return null;
    if ((0, positionUtils_1.manhattanDistance)((0, positionUtils_1.dangerouslyCastToPoint)(player), (0, positionUtils_1.dangerouslyCastToPoint)(target)) !== 1)
        return null;
    if (player.x - target.x === 1) {
        return Player_1.MoveDirection.Left;
    }
    else if (player.x - target.x === -1) {
        return Player_1.MoveDirection.Right;
    }
    else if (player.y - target.y === 1) {
        return Player_1.MoveDirection.Up;
    }
    else if (player.y - target.y === -1) {
        return Player_1.MoveDirection.Down;
    }
    return null;
}
exports.directionToFacePlayer = directionToFacePlayer;
function whisperIdToColor(id) {
    if (id.length === 7)
        return id;
    return "#" + id.slice(0, 6);
}
exports.whisperIdToColor = whisperIdToColor;
exports.CONSTANT_PERMANENT_EMOTES = [exports.EMOTE_EMOJIS[Emote.RaisedHand]];
const keyPressedToEmote = (keycode, emotesArray) => emotesArray[keycode - 1];
exports.keyPressedToEmote = keyPressedToEmote;
const getAllEmotes = (tempEmotes) => [...tempEmotes, ...exports.CONSTANT_PERMANENT_EMOTES];
exports.getAllEmotes = getAllEmotes;
var VehicleAction;
(function (VehicleAction) {
    VehicleAction["Mount"] = "mount";
    VehicleAction["Dismount"] = "dismount";
})(VehicleAction = exports.VehicleAction || (exports.VehicleAction = {}));
//# sourceMappingURL=playerUtils.js.map