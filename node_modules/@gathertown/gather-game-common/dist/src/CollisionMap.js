"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertCollisionBase64BytesToBits = exports.convertCollisionBase64BytesToBitsWithRegion = exports.convertCollisionBytesToBitsWithRegion = exports.convertCollisionBytesToBits = exports.convertCollisionBitsToBytes = void 0;
function convertCollisionBitsToBytes(w, h, bits) {
    const bytes = new Uint8Array(w * h);
    for (let i = 0; i < bytes.length; i++) {
        bytes[i] = bits[i >> 3] & (1 << (i & 7)) ? 1 : 0;
    }
    return bytes;
}
exports.convertCollisionBitsToBytes = convertCollisionBitsToBytes;
function convertCollisionBytesToBits(bytes) {
    const bits = new Uint8Array(Math.ceil(bytes.length / 8));
    for (let i = 0; i < bytes.length; i++) {
        if (bytes[i]) {
            bits[i >> 3] |= 1 << (i & 7);
        }
    }
    return bits;
}
exports.convertCollisionBytesToBits = convertCollisionBytesToBits;
function convertCollisionBytesToBitsWithRegion(w, h, bytes) {
    let minX = w;
    let minY = h;
    let maxX = 0;
    let maxY = 0;
    for (let y = 0; y < h; y++) {
        for (let x = 0; x < w; x++) {
            if (!bytes[y * w + x]) {
                continue;
            }
            minX = Math.min(x, minX);
            minY = Math.min(y, minY);
            maxX = Math.max(x, maxX);
            maxY = Math.max(y, maxY);
        }
    }
    if (maxX === 0 && maxY === 0) {
        return { x: 0, y: 0, w: 0, h: 0, mask: new Uint8Array([0]) };
    }
    maxX += 1;
    maxY += 1;
    const regionW = maxX - minX;
    const regionH = maxY - minY;
    const mask = new Uint8Array(Math.ceil((regionW * regionH) / 8));
    for (let y = minY; y < maxY; y++) {
        for (let x = minX; x < maxX; x++) {
            const i = y * w + x;
            const j = (y - minY) * regionW + (x - minX);
            if (bytes[i]) {
                mask[j >> 3] |= 1 << (j & 7);
            }
        }
    }
    return {
        x: minX,
        y: minY,
        w: regionW,
        h: regionH,
        mask,
    };
}
exports.convertCollisionBytesToBitsWithRegion = convertCollisionBytesToBitsWithRegion;
function convertCollisionBase64BytesToBitsWithRegion(w, h, base64Collisions) {
    return convertCollisionBytesToBitsWithRegion(w, h, Buffer.from(base64Collisions, "base64"));
}
exports.convertCollisionBase64BytesToBitsWithRegion = convertCollisionBase64BytesToBitsWithRegion;
function convertCollisionBase64BytesToBits(base64Collisions) {
    return convertCollisionBytesToBits(Buffer.from(base64Collisions, "base64"));
}
exports.convertCollisionBase64BytesToBits = convertCollisionBase64BytesToBits;
//# sourceMappingURL=CollisionMap.js.map