"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.subtractPoints = exports.getPointFromBoundingBox = exports.getBoundingBox = exports.calcCentroid = exports.isPointWithinRectangle = exports.euclideanDistance = exports.manhattanDistance = exports.deserializePoint = exports.indexToPoint = exports.coordinatesToIndex = exports.pointToIndex = exports.serializePointCoordinates = exports.serializePoint = exports.dangerouslyCastToPoint = exports.isMapPositionEqual = exports.isPointEqual = void 0;
const isPointEqual = (a, b) => a.x === b.x && a.y === b.y;
exports.isPointEqual = isPointEqual;
function isMapPositionEqual(a, b) {
    return a.x === b.x && a.y === b.y && a.map === b.map;
}
exports.isMapPositionEqual = isMapPositionEqual;
function dangerouslyCastToPoint(mapPosition) {
    return mapPosition;
}
exports.dangerouslyCastToPoint = dangerouslyCastToPoint;
function serializePoint(p) {
    return serializePointCoordinates(p.x, p.y);
}
exports.serializePoint = serializePoint;
function serializePointCoordinates(x, y) {
    return `${x} ${y}`;
}
exports.serializePointCoordinates = serializePointCoordinates;
function pointToIndex(pos, width) {
    return coordinatesToIndex(pos.x, pos.y, width);
}
exports.pointToIndex = pointToIndex;
function coordinatesToIndex(x, y, width) {
    return y * width + x;
}
exports.coordinatesToIndex = coordinatesToIndex;
let _x, _y;
function indexToPoint(index, width) {
    _y = (index / width) | 0;
    _x = index - _y * width;
    return { x: _x, y: _y };
}
exports.indexToPoint = indexToPoint;
function deserializePoint(s) {
    const parts = s.split(" ");
    return { x: parseFloat(parts[0]), y: parseFloat(parts[1]) };
}
exports.deserializePoint = deserializePoint;
function manhattanDistance(a, b) {
    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);
}
exports.manhattanDistance = manhattanDistance;
function euclideanDistance(a, b) {
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
exports.euclideanDistance = euclideanDistance;
function isPointWithinRectangle(position, rectBounds) {
    return (position.x >= rectBounds.x &&
        position.y >= rectBounds.y &&
        position.x < rectBounds.x + rectBounds.width &&
        position.y < rectBounds.y + rectBounds.height);
}
exports.isPointWithinRectangle = isPointWithinRectangle;
function calcCentroid(coords) {
    let x_mean = 0;
    let y_mean = 0;
    for (const { x, y } of coords) {
        x_mean += x;
        y_mean += y;
    }
    return { x: x_mean / coords.length, y: y_mean / coords.length };
}
exports.calcCentroid = calcCentroid;
function getBoundingBox(coords) {
    const bound = { x1: Infinity, y1: Infinity, x2: 0, y2: 0 };
    for (const { x, y } of coords) {
        if (x < bound.x1) {
            bound.x1 = x;
        }
        if (y < bound.y1) {
            bound.y1 = y;
        }
        if (x > bound.x2) {
            bound.x2 = x;
        }
        if (y > bound.y2) {
            bound.y2 = y;
        }
    }
    return {
        x: bound.x1,
        y: bound.y1,
        width: bound.x2 - bound.x1 + 1,
        height: bound.y2 - bound.y1 + 1,
    };
}
exports.getBoundingBox = getBoundingBox;
function getPointFromBoundingBox(bbox, width = Infinity, height = Infinity) {
    const { x1, y1, x2, y2 } = bbox;
    const minX = Math.max(0, Math.min(x1, x2));
    const maxX = Math.min(width - 1, Math.max(x1, x2));
    const minY = Math.max(0, Math.min(y1, y2));
    const maxY = Math.min(height - 1, Math.max(y1, y2));
    const coords = [];
    for (let y = minY; y <= maxY; y++) {
        for (let x = minX; x <= maxX; x++) {
            coords.push({ x, y });
        }
    }
    return coords;
}
exports.getPointFromBoundingBox = getPointFromBoundingBox;
const subtractPoints = (position1, position2) => ({
    x: position1.x - position2.x,
    y: position1.y - position2.y,
});
exports.subtractPoints = subtractPoints;
//# sourceMappingURL=positionUtils.js.map