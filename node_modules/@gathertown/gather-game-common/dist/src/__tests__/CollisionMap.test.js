"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CollisionMap_1 = require("../CollisionMap");
describe("#convertCollsionMaps", () => {
    it("should convert from byte to bits representation", () => {
        const mapAsBytes = [
            1, 0, 0, 1, 0,
            1, 1, 1, 0, 1,
            0, 0, 1, 1, 1
        ];
        const mapAsBits = (0, CollisionMap_1.convertCollisionBytesToBits)(mapAsBytes);
        expect(Array.from(mapAsBits)).toEqual([233, 114]);
    });
    it("should convert from bits to byte representation", () => {
        const mapAsBytes = (0, CollisionMap_1.convertCollisionBitsToBytes)(5, 3, [233, 114]);
        expect(Array.from(mapAsBytes)).toEqual([
            1, 0, 0, 1, 0,
            1, 1, 1, 0, 1,
            0, 0, 1, 1, 1
        ]);
    });
    it("should convert from byte to bits representation with region", () => {
        const mapAsBytes = [
            0, 0, 0, 0, 0, 0,
            0, 0, 1, 0, 0, 0,
            0, 0, 1, 1, 1, 0,
            0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0
        ];
        const mapAsBitsWithRegion = (0, CollisionMap_1.convertCollisionBytesToBitsWithRegion)(6, 5, mapAsBytes);
        expect(mapAsBitsWithRegion.x).toBe(2);
        expect(mapAsBitsWithRegion.y).toBe(1);
        expect(mapAsBitsWithRegion.w).toBe(3);
        expect(mapAsBitsWithRegion.h).toBe(2);
        expect(Array.from(mapAsBitsWithRegion.mask)).toEqual([57]);
    });
    it("should return empty result when no impassable tiles detected", () => {
        const mapAsBytes = [
            0, 0, 0,
            0, 0, 0,
            0, 0, 0,
        ];
        const mapAsBitsWithRegion = (0, CollisionMap_1.convertCollisionBytesToBitsWithRegion)(3, 3, mapAsBytes);
        expect(mapAsBitsWithRegion.x).toBe(0);
        expect(mapAsBitsWithRegion.y).toBe(0);
        expect(mapAsBitsWithRegion.w).toBe(0);
        expect(mapAsBitsWithRegion.h).toBe(0);
        expect(Array.from(mapAsBitsWithRegion.mask)).toEqual([0]);
    });
});
//# sourceMappingURL=CollisionMap.test.js.map