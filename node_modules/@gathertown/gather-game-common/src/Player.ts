import {
  DBOutfit,
  DeskInfoV2,
  Inventory,
  MoveDirectionEnum_ENUM as MoveDirection,
  SpriteDirectionEnum_ENUM as SpriteDirection,
} from "./generated_DO_NOT_TOUCH/events";

export { SpriteDirection, MoveDirection };

// types shared between MemberInfo and Player
export interface BaseRoomUserDB {
  allowScreenPointer?: boolean;
  currentlyEquippedWearables?: DBOutfit;
  // TODO OCTO-177: this is technically incorrect, clean up (see Linear for details)
  deskInfo?: DeskInfoV2;
  inventory?: Inventory;
  name?: string;
}

// This is the schema for player info persisted to the db. These fields are stored in the
// `rooms/users` collection, and should be set through actions sent to the game server:
// `gameSpace.setPlayerRoomInfo`.
// Right now everything is optional, because we don't have any real guarantees the data in the
// DB is actually not null.
// If you add something here, it will be persisted to the DB. Also make sure add it to the
// `PlayerDBFields` class below.
// (This will eventually be generated from Prisma.)
export interface PlayerDB extends BaseRoomUserDB {
  affiliation?: string;
  allowScreenPointer?: boolean;
  busy?: boolean;
  connected?: boolean;
  currentDesk?: string;
  description?: string;
  // TODO OCTO-177: this is technically incorrect, clean up (see Linear for details)
  deskInfo?: DeskInfoV2;
  emojiStatus?: string;
  focusModeEndTime?: string;
  inventory?: Inventory;
  isNpc?: boolean;
  itemString?: string;
  map?: string;
  name?: string;
  personalImageUrl?: string;
  phone?: string;
  profileImageUrl?: string;
  pronouns?: string;
  textStatus?: string;
  timezone?: string;
  title?: string;
  city?: string;
  country?: string;
  startDate?: string;
  x?: number;
  y?: number;
}

// This is currently redundant to PlayerDB, but there will come a time when not all fields on
// PlayerDB are optional, and then the partial type will become more significant.
export type PlayerDBPartial = Partial<PlayerDB>;

// This class is used for runtime checking of the fields on a data blob passed to the game-server.
// It needs to be a class that implements the type, so we can instantiate a dummy object and then
// do runtime checks about the fields on the incoming payload, e.g. iterating across the keys
// of the dummy object fields and validating things about the payload.
// It also serves as the base class to `Player` which is used to create a default Player object.
// These are fields that are part of the schema, so default values here will be the default
// values persisted to the DB.
export class PlayerDBFields implements PlayerDB {
  affiliation = "";
  allowScreenPointer = true;
  busy = false;
  connected = false;
  currentDesk = "";
  // have to set this as undefined so the field exists on an instance of PlayerDBFields
  currentlyEquippedWearables?: DBOutfit = undefined;
  description = "";
  // TODO OCTO-177: this is technically incorrect, clean up (see Linear for details)
  deskInfo: DeskInfoV2 = { deskId: "" };
  emojiStatus = "";
  focusModeEndTime = "";
  inventory: Inventory = { items: {}, order: {} };
  isNpc = false;
  itemString = "";
  map = "";
  name = "";
  personalImageUrl = "";
  phone = "";
  profileImageUrl = "";
  pronouns = "";
  textStatus = "";
  timezone = "";
  title = "";
  city = "";
  country = "";
  startDate = "";
  x = 0;
  y = 0;
  isRecordingClient = false;
}

// Player is what the server and client use in-memory, not necessarily what is stored in the DB.
// Look to the PlayerDB to get the DB schema.
export class Player extends PlayerDBFields {
  // currentlyEquippedWearables doesn't exist on Player, it gets converted to `outfitString`.
  // we have to explicitly declare this prop will be undefined, since we're inheriting from the base
  currentlyEquippedWearables?: undefined;

  direction: SpriteDirection = SpriteDirection.Down;
  ghost = 0;
  spotlighted = 0;
  emote: string | undefined = undefined;
  // TODO: (@josh and @a-lchen) Use boolean rather than number (and transform to bool in the selector)
  workCondition = 1;
  away = false;
  activelySpeaking = 0;
  lastActive = "";
  lastInputId = 0;
  whisperId = "";
  isSignedIn = false;
  outfitString = ""; // todo @a-lchen fix this when we can
  eventStatus = "";
  inConversation = false;
  currentArea = "";
  vehicleId = "";
  speedModifier = 1;
  isAlone = true;
  isMobile = false;
  followTarget = "";
  manualVideoSrc = "";
  manualDefaultVideoImageSrc = "";
  manualScreenSrc = "";
  subtitle = "";

  constructor() {
    super();
    // we check the `in` keyword, so we can't have the field on the object at all
    // Since we're extending from a class that has it set as `undefined`, we need to do a little
    // extra here.
    delete this.currentlyEquippedWearables;
  }
}
